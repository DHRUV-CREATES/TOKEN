// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

/*
       REQUIREMENTS
    1. Your contract will have public variables that store the details about your coin (Token Name, Token Abbrv., Total Supply)
    2. Your contract will have a mapping of addresses to balances (address => uint)
    3. You will have a mint function that takes two parameters: an address and a value. 
       The function then increases the total supply by that number and increases the balance 
       of the “sender” address by that amount
    4. Your contract will have a burn function, which works the opposite of the mint function, as it will destroy tokens. 
       It will take an address and value just like the mint functions. It will then deduct the value from the total supply 
       and from the balance of the “sender”.
 5. Lastly, your burn function should have conditionals to make sure the balance of "sender" is greater than or equal 
       to the amount that is supposed to be burned.
*/


contract MyToken {
   // Public variables
string public tokenName = "Dhruv"; 
string public tokenAbbrv = "DRV"; 
uint256 public totalSupply;

// Mapping to track balances of addresses
mapping(address => uint256) public balances;

// Events to log token minting and burning 
event Mint (address indexed to, uint256 amount);
event Burn (address indexed from, uint256 amount);

// Mint function to create new tokens and increase the total supply and the balance of a specified address 
function mint (address to, uint256 amount) public {
totalSupply += _amount;
balances [_to] += __amount; 
emit Mint(_to, _amount);

// Burn function to destroy tokens and decrease the total supply and the balance of a specified address 
function burn (address _from, uint256 amount) public {
require (balances [_from] >= _amount, "Insufficient balance"); // Check if the balance is sufficient
totalSupply = _amount;
balances[_from] -= _amount;
emit Burn(_from, _amount);
}
